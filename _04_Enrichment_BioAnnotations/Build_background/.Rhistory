n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1)[1],n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
dim(data_pca1)[1]
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1)[1],n_clusters) # random initialisation of clusters
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
dim(X)[1]
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
dim(X)
dim(X)[1]
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
dim(data_pca1)
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1)[1],n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
data_pca1
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1)[1],n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
data_pca1
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1),n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1) ,n_clusters) # random initialisation of clusters
if (!"FactoMineR" %in% installed.packages()) install.packages("FactoMineR")
if (!"mclust" %in% installed.packages()) install.packages("mclust")
# Adresse des deux fichiers de donnees
# https://perso.univ-rennes1.fr/valerie.monbet/MachineLearning/TCGA-PANCAN-HiSeq-801x20531/data.csv
# https://perso.univ-rennes1.fr/valerie.monbet/MachineLearning/TCGA-PANCAN-HiSeq-801x20531/labels.csv
print("Do not forget to replace by your student number")
etudiant = 20102132 # nombre à  remplacer par votre numéro d'etudiant
set.seed(etudiant)
# First line is read to get the number of columns
Xtmp = read.csv("data.csv",sep=",")
data = read.csv("data.csv", header = T, sep=",")
labels = read.csv("labels.csv",sep=",",skip=1, header=F)$V2
head(labels)
#nvars=len(X)-1
# Lecture des donnees correpondant aux nvars premieres variables
# et a la moitie des individus.
print("Choose the number of variables nvars.")
nvars=200
print(paste("Data corresponding to=",nvars))
print(      "first variables and  first half of individuals are read",)
print(     "(they are randomly sampled according to your student number)")
nech=floor(dim(data)[1]/2)
per=sample(1:dim(Xtmp)[1],nech)
X = Xtmp[per,1:nvars]
rm(Xtmp)
labels = labels[per]
print(paste("Line and column numbers : ",dim(data)))
# Elimination des variables constantes
l=which(apply(X,2,sd)>1.e-8)
X=X[,l]
print(paste("Line and column numbers after deleting constant columns: ",dim(X)))
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
dim(X)
dim(X)[1]
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
cl_lab = cl
for (k in 1:n_clusters){
ii = which(cl==k) # Individus de la classe k
counts=table(labels[ii]) # Nb d'occurences de chaque label
imax=which.max(counts) # Calcul du majoritaire
maj_lab=attributes(counts)$dimnames[[1]][imax] # Son étiquette
print(paste("Classe ",k,", label majoritaire = ",maj_lab))
cl_lab[ii] = maj_lab
}
(conf_mat = table(labels,cl_lab))
counts <- table(cl_lab,labels)
for (ii in 1:dim(counts)[2]){
counts[,ii] = counts[,ii]/sum(counts[,ii])
}
barplot(counts, main=" ",
xlab="Labels", col=1:5,
legend = 0:4)
library(FactoMineR)
pca = PCA(X, ncp=2)
# plot des individus et des variables
df = data.frame(cbind(pca$ind$coord))
colnames(df) = c("PC1","PC2")
df$Labels = labels
library(ggplot2)
ggplot(df, aes(x=PC1,y=PC2, colour=Labels)) +
geom_point()+
labs(title="PCA")
# plot des individus dans les deux plans de l'ACP, coloration en fonction du label
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1) ,n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
len(data_pca1)
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
dim(data_pca1)
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1) ,n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
data_pca1[1]
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(data_pca1) ,n_clusters) # random initialisation of clusters
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
dim(X)[1]
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:dim(data_pca1)[1] ,n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca1 = df[,1]
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:nrow(data_pca1) ,n_clusters) # random initialisation of clusters
1:nrow(df[,1])
dim(data_pca1)
df[,1]
df
df[,1]
dim(data_pca1)
len(data_pca1)
nrwo(data_pca1)
nrow(data_pca1)
dim(df)
i.centers_pca = sample(1:df[1] ,n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:df[,1] ,n_clusters) # random initialisation of clusters
centers_pca1 = X[i.centers_pca,]
library(mclust)
library(FactoMineR)
p = ncol(X)
GMM = Mclust(X, G=5)
GMM
## Not run
# mod = Mclust(digits,G=5,modelNames = c("EEI", "EVI")) # Too expensive in computational time... ok in Python
GMM$classification
cl
cl_lab_GMM = GMM$classification
for (k in 1:n_clusters){
ii = which(cl_lab_GMM==k) # Individus de la classe k
counts=table(labels[ii]) # Nb d'occurences de chaque label
imax=which.max(counts) # Calcul du majoritaire
maj_lab=attributes(counts)$dimnames[[1]][imax] # Son étiquette
print(paste("Classe ",k,", label majoritaire = ",maj_lab))
cl_lab[ii] = maj_lab
}
(conf_mat = table(labels,cl_lab_GMM))
cl_lab
cl
# Adresse des deux fichiers de donnees
# https://perso.univ-rennes1.fr/valerie.monbet/MachineLearning/TCGA-PANCAN-HiSeq-801x20531/data.csv
# https://perso.univ-rennes1.fr/valerie.monbet/MachineLearning/TCGA-PANCAN-HiSeq-801x20531/labels.csv
print("Do not forget to replace by your student number")
etudiant = 20102132 # nombre à  remplacer par votre numéro d'etudiant
set.seed(etudiant)
# First line is read to get the number of columns
Xtmp = read.csv("data.csv",sep=",")
data = read.csv("data.csv", header = T, sep=",")
labels = read.csv("labels.csv",sep=",",skip=1, header=F)$V2
head(labels)
#nvars=len(X)-1
# Lecture des donnees correpondant aux nvars premieres variables
# et a la moitie des individus.
print("Choose the number of variables nvars.")
nvars=200
print(paste("Data corresponding to=",nvars))
print(      "first variables and  first half of individuals are read",)
print(     "(they are randomly sampled according to your student number)")
nech=floor(dim(data)[1]/2)
per=sample(1:dim(Xtmp)[1],nech)
X = Xtmp[per,1:nvars]
rm(Xtmp)
labels = labels[per]
print(paste("Line and column numbers : ",dim(data)))
# Elimination des variables constantes
l=which(apply(X,2,sd)>1.e-8)
X=X[,l]
print(paste("Line and column numbers after deleting constant columns: ",dim(X)))
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
cl
cl_lab = cl
cl_lab
for (k in 1:n_clusters){
ii = which(cl==k) # Individus de la classe k
counts=table(labels[ii]) # Nb d'occurences de chaque label
imax=which.max(counts) # Calcul du majoritaire
maj_lab=attributes(counts)$dimnames[[1]][imax] # Son étiquette
print(paste("Classe ",k,", label majoritaire = ",maj_lab))
cl_lab[ii] = maj_lab
}
cl_lab
(conf_mat = table(labels,cl_lab))
counts <- table(cl_lab,labels)
for (ii in 1:dim(counts)[2]){
counts[,ii] = counts[,ii]/sum(counts[,ii])
}
barplot(counts, main=" ",
xlab="Labels", col=1:5,
legend = 0:4)
library(FactoMineR)
pca = PCA(X, ncp=2)
# plot des individus et des variables
df = data.frame(cbind(pca$ind$coord))
colnames(df) = c("PC1","PC2")
df$Labels = labels
library(ggplot2)
ggplot(df, aes(x=PC1,y=PC2, colour=Labels)) +
geom_point()+
labs(title="PCA")
# plot des individus dans les deux plans de l'ACP, coloration en fonction du label
df = data.frame(cbind(pca$ind$coord))
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:df[,1] ,n_clusters) # random initialisation of clusters
centers_pca1 = X[i.centers_pca,]
df = data.frame(cbind(pca$ind$coord))
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:df[,1] ,n_clusters) # random initialisation of clusters
centers_pca1 = X[i.centers_pca,]
df = data.frame(cbind(pca$ind$coord))
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:df[,1] ,n_clusters) # random initialisation of clusters
centers_pca1 = X[i.centers_pca,]
df = data.frame(cbind(pca$ind$coord))
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:df[,1] ,n_clusters) # random initialisation of clusters
centers_pca1 = X[i.centers_pca,]
library(mclust)
library(FactoMineR)
p = ncol(X)
GMM = Mclust(X, G=5)
GMM$classification
## Not run
# mod = Mclust(digits,G=5,modelNames = c("EEI", "EVI")) # Too expensive in computational time... ok in Python
cl_lab_GMM = GMM$classification
cl_lab_GMM
for (k in 1:n_clusters){
ii = which(cl_lab_GMM==k) # Individus de la classe k
counts=table(labels[ii]) # Nb d'occurences de chaque label
imax=which.max(counts) # Calcul du majoritaire
maj_lab_GMM=attributes(counts)$dimnames[[1]][imax] # Son étiquette
print(paste("Classe ",k,", label majoritaire = ",maj_lab_GMM))
cl_lab_GMM[ii] = maj_lab_GMM
}
(conf_mat = table(labels,cl_lab_GMM))
nc = 25 # You can try to change the number of components
set.seed("123") # Initialization of the random number generator (for mclust)
pca = PCA(X,nc=nc,graph=FALSE)
mod = Mclust(pca$ind$coord,G=2:7)  #fit a Gaussian mixture with various covariance models, max number of cluster = 10
plot(mod,"BIC") # best model = "VVV", BIC continues to increase
cl = mod$classification
n_cl = length(unique(cl))
#  Images of cluster centers (gmm classification + empirical means)
par(mfrow=c(1,n_cl),mar=c(1,1,1,1))
for (k in 1:n_cl){
ii = which(mod$classification==k)
center = apply(X[ii,],2,mean)
image(matrix(center,28,28)[,rev(1:28)])
title("Cluster ",k)
}
mod = Mclust(pca$ind$coord,G=5)
par(mfrow=c(1,5))
for (k in 1:5){
ii = which(mod$classification==k)
center = apply(X[ii,],2,mean)
image(matrix(center,28,28)[,rev(1:28)])
title("Cluster ",k)
}
plot(pca$ind$coord,pch=20,col="white")
text(pca$ind$coord,labels=labels, col=mod$classification)
df = data.frame(cbind(pca$ind$coord))
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:df[,1] ,n_clusters) # random initialisation of clusters
centers_pca1 = df[i.centers_pca,]
df = data.frame(cbind(pca$ind$coord))
data_pca = df[,-1]
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:data_pca ,n_clusters) # random initialisation of clusters
df = data.frame(cbind(pca$ind$coord))
data_pca = df[,-1]
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:data_pca ,n_clusters) # random initialisation of clusters
data_pca
df = data.frame(cbind(pca$ind$coord))
data_pca = df[,-1]
data_pca
data_pca = df[,1]
data_pca
colnames(data_pca) = c("PC1", "PC2")
df = data.frame(cbind(pca$ind$coord))
colnames(df) = c("PC1", "PC2")
df
df = data.frame(cbind(pca$ind$coord))
df
df = data.frame(cbind(pca$ind$coord))
df = data.frame(cbind(pca$ind$coord))
colnames(df) = c("PC1","PC2")
df$Labels = labels
library(ggplot2)
ggplot(df, aes(x=PC1,y=PC2, colour=Labels)) +
geom_point()+
labs(title="PCA")
df
n_clusters = length(unique(labels)) # Number of clusters
set.seed(1)
i.centers_pca = sample(1:data_pca ,n_clusters) # random initialisation of clusters
centers_pca = data_pca[i.centers_pca,]
barplot(pca$eig)
if (!"FactoMineR" %in% installed.packages()) install.packages("FactoMineR")
if (!"mclust" %in% installed.packages()) install.packages("mclust")
# Adresse des deux fichiers de donnees
# https://perso.univ-rennes1.fr/valerie.monbet/MachineLearning/TCGA-PANCAN-HiSeq-801x20531/data.csv
# https://perso.univ-rennes1.fr/valerie.monbet/MachineLearning/TCGA-PANCAN-HiSeq-801x20531/labels.csv
print("Do not forget to replace by your student number")
etudiant = 20102132 # nombre à  remplacer par votre numéro d'etudiant
set.seed(etudiant)
# First line is read to get the number of columns
Xtmp = read.csv("data.csv",sep=",")
data = read.csv("data.csv", header = T, sep=",")
labels = read.csv("labels.csv",sep=",",skip=1, header=F)$V2
head(labels)
#nvars=len(X)-1
# Lecture des donnees correpondant aux nvars premieres variables
# et a la moitie des individus.
print("Choose the number of variables nvars.")
nvars=200
print(paste("Data corresponding to=",nvars))
print(      "first variables and  first half of individuals are read",)
print(     "(they are randomly sampled according to your student number)")
nech=floor(dim(data)[1]/2)
per=sample(1:dim(Xtmp)[1],nech)
X = Xtmp[per,1:nvars]
rm(Xtmp)
labels = labels[per]
print(paste("Line and column numbers : ",dim(data)))
# Elimination des variables constantes
l=which(apply(X,2,sd)>1.e-8)
X=X[,l]
print(paste("Line and column numbers after deleting constant columns: ",dim(X)))
n_clusters = length(unique(labels)) # Number of clusters
n_clusters
set.seed(1)
i.centers = sample(1:dim(X)[1],n_clusters) # random initialisation of clusters
centers = X[i.centers,]
km = kmeans(X,centers,nstart=10,iter.max=50)
cl = km$cluster # length 801
cl
setwd("~/Desktop/PA_Communities/_00_data/gmt_files")
install.packages("GSA")
library(GSA)
data <- GSA.read.gmt("hsapiens.REAC.name.gmt")
head(data)
gene_names <- unlist(data$geneset.names, gene_names)
gene_names <- unlist(data$geneset.names, use.names = FALSE)
your_dataframe <- cbind(data$geneset.names,gene_names)
colnames(your_dataframe) <- c("Pathways", "Genes")
mydataframe <- as.data.frame(your_dataframe)
head(mydataframe)
data <- GSA.read.gmt("hsapiens.REAC.name.gmt")
head(data)
len_vec = c()
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
head(desired_df)
print(data$genesets)
print(data.col)
print(data.columns)
data <- GSA.read.gmt("hsapiens.REAC.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
setwd("~/Desktop/PA_Communities/_04_Enrichment_BioAnnotations")
library(GSA)
data <- GSA.read.gmt("../_00_data/hsapiens.REAC.name.gmt")
data <- GSA.read.gmt("../_00_data/gmt_files/hsapiens.REAC.name.gmt")
write.csv(desired_df, row.names = FALSE)
setwd("~/Desktop/PA_Communities/_04_Enrichment_BioAnnotations/Build_background")
library(GSA)
data <- GSA.read.gmt("hsapiens.REAC.name.gmt")
data <- GSA.read.gmt("../_00_data/gmt_files/hsapiens.REAC.name.gmt")
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.REAC.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
head(desired_df)
write.csv(desired_df, row.names = FALSE)
write.csv(desired_df, "REAC_genes.tsv", sep="\t", row.names = FALSE)
write.csv(desired_df, "REAC_genes.csv", row.names = FALSE)
library(GSA)
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.REAC.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
head(desired_df)
colnames(desired_df) <- c("Pathway term", "Gene")
write.csv(desired_df, "REAC_genes.csv", row.names = FALSE)
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.GO:BP.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
head(desired_df)
colnames(desired_df) <- c("GO:BP term", "Gene")
write.csv(desired_df, "GOBP_genes.csv", row.names = FALSE)
# GO CC GMT file
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.GO:CC")
# GO CC GMT file
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.GO:CC.gmt")
# GO CC GMT file
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.GO:CC.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
colnames(desired_df) <- c("GO:CC term", "Gene")
write.csv(desired_df, "GOBP_genes.csv", row.names = FALSE)
# GO BP GMT file
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.GO:BP.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
colnames(desired_df) <- c("GO:BP term", "Gene")
write.csv(desired_df, "GOBP_genes.csv", row.names = FALSE)
# GO CC GMT file
data <- GSA.read.gmt("../../_00_data/gmt_files/hsapiens.GO:CC.name.gmt")
len_vec = c() # create vector that will contain the length of genes at each position
len_vec[1] = 3
for(i in 1:length(data$genesets)){len_vec[i] <- c(length(data$genesets[[i]]))}
pathway_vec <- unlist(Vectorize(rep.int)(data$geneset.names, len_vec),use.names = FALSE) # Now create a vector for all the pathways in the data
desired_df <- as.data.frame(cbind(pathway_vec,unlist(data$genesets,use.names = FALSE))) # This gives your desired dataframe
colnames(desired_df) <- c("GO:CC term", "Gene")
write.csv(desired_df, "GOCC_genes.csv", row.names = FALSE)
